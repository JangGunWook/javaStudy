package ex01JDBC기초;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

public class ex05회원정보수정 {

	public static void main(String[] args) {
		
		PreparedStatement psmt = null;
		Connection conn = null;	
		ResultSet rs = null;
				
				
		Scanner sc = new Scanner(System.in);
	
		System.out.print("ID 입력 : ");
		String id = sc.next();
		
		System.out.print("PW 입력 : ");
		String pw = sc.next();
			
		try {
		
			
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			
			
			String url = "jdbc:oracle:thin:@127.0.0.1:1521:xe";
			String user = "service";
			String passward = "12345";
			
			conn = DriverManager.getConnection(url, user, passward);
			// Connection --> interface
			
			if(conn != null) {
				System.out.println("연결성공");
			}
			
			//회원 계정확인
			String sql = "SELECT * FROM AIMEMBER WHERE ID = ? AND PW = ? ";
			psmt = conn.prepareStatement(sql);
			psmt.setString(1, id);
			psmt.setString(2, pw);
			
			rs = psmt.executeQuery();
			
			if(rs.next()) {
				System.out.println("회원계정확인이 확인되었습니다.");
			}else {
				System.err.println("회원계정확인이 안됩니다.");
				
				
			}
			
				
			
			System.out.println("수정할 이름을 입력 : ");
			String name = sc.next();
			
			
			
				String sql1 = "UPDATE AIMEMBER SET NAME = ? WHERE ID = ? AND PW = ?";
			
				psmt = conn.prepareStatement(sql1);
				
				
			// 3-3) 전송하기 전에 ?인자 채우는 작업 반드시 진행!
				psmt.setString(1, name);
				psmt.setString(2, id);
				psmt.setString(3, pw);
				
				
			
			// 4) SQL문 전송(실행) --DML(delete, insert, update)
				int row = psmt.executeUpdate();
			// excuteUpdate() : insert,delete, update에만 사용한다.
				
			// 5) 결과를 이용한 작업처리
			//   >> 사용자에게 어떤 모습을 보여줄건지 정의
				if(row > 0) {
					System.out.println("회원정보 수정 성공");
				}else {
					System.out.println("회원정보 수정 실패");
					
					System.out.print("ID 입력 : ");
					id = sc.next();
					
					System.out.print("PW 입력 : ");
					pw = sc.next();
				}
			
		} catch (Exception e) {
			// Exception --> 모든 예외상황에 대한 부모클래스
			// : 업케스팅이 일어났기 때문에 모든 예외상황이 잡을 수 있다!
			e.printStackTrace();
		} finally {
			// 위에서 예외상황이 발생하든 안하든 반드시 한번은 들어오는 구간
			// 6) DB연결 종료
			// sql문 종료
			try {
				// 자원을 반납할때 항상 사용한 순서의 역순으로 반납한다.
				if(psmt != null)
				psmt.close();	// sql문 전송 종료
				if(conn !=null)
				conn.close();	// DB연결 종료
			} catch (SQLException e) {
				e.printStackTrace();
			}
			
			
			
			
		}
	}

}
